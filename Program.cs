using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Markdig;
using Markdig.Renderers;
using Markdig.Syntax;

namespace Markdown_Kanban
{
    class Program
    {
        static void Main(string directory = ".")
        {
            Console.WriteLine($"Building Kanban from <{directory}>...");
            var board = LoadKanbanBoard(directory);
            SaveKanbanBoard(Path.Combine(directory, "index.html"), board);
        }

        static MarkdownDocument Load(params string[] paths)
        {
            try
            {
                var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
                return Markdown.Parse(File.ReadAllText(Path.Combine(paths)), pipeline);
            }
            catch (FileNotFoundException)
            {
                Console.WriteLine($"Potentially missing file: {Path.Combine(paths)}");
                return Markdown.Parse("");
            }
        }

        static void WriteText(TextWriter writer, params MarkdownObject[] markdown)
        {
            var renderer = new HtmlRenderer(writer)
            {
                EnableHtmlForBlock = false,
                EnableHtmlForInline = false,
                EnableHtmlEscape = false,
            };
            foreach (var obj in markdown) renderer.Render(obj);
            writer.Flush();
        }

        static string GetAsText(params MarkdownObject[] markdown)
        {
            var text = new StringWriter();
            WriteText(text, markdown);
            return text.ToString().Replace("\n", "");
        }

        static void WriteHtml(TextWriter writer, params MarkdownObject[] markdown)
        {
            var renderer = new HtmlRenderer(writer);
            foreach (var obj in markdown) renderer.Render(obj);
            writer.Flush();
        }

        static void WriteLabels(TextWriter writer, MarkdownDocument markdown)
        {
            foreach (var label in markdown
                .Where(obj => obj is HeadingBlock && (obj as HeadingBlock).Level == 6)
                .Cast<HeadingBlock>()
                .Select(heading => GetAsText(heading))
                .Where(label => label.StartsWith("Label ["))
                .Select(label => (label.Substring(7, label.IndexOf("] ") - 7), label.Substring(label.IndexOf("] ") + 2))))
            {
                writer.Write(@$"<span class=""badge rounded-pill"" style=""background: {label.Item2}"">{label.Item1}</span>");
            }
        }

        static KanbanBoard LoadKanbanBoard(string directory)
        {
            return new KanbanBoard()
            {
                Markdown = Load(directory, "index.md"),
                Lists = Directory.GetDirectories(directory).Select(LoadKanbanList).ToList(),
            };
        }

        static KanbanList LoadKanbanList(string directory)
        {
            return new KanbanList()
            {
                Id = Path.GetFileName(directory),
                Markdown = Load(directory, "index.md"),
                Cards = Directory.GetFiles(directory).Select(LoadKanbanCard).ToList(),
            };
        }

        static KanbanCard LoadKanbanCard(string file)
        {
            return new KanbanCard()
            {
                Id = Path.GetFileNameWithoutExtension(file),
                Markdown = Load(file),
            };
        }

        static MarkdownObject GetTitle(MarkdownDocument markdown)
        {
            return markdown.First(obj => obj is HeadingBlock && (obj as HeadingBlock).Level == 1);
        }

        static MarkdownObject[] GetBody(MarkdownDocument markdown)
        {
            return markdown.Where(obj => !(obj is HeadingBlock) || ((obj as HeadingBlock).Level > 1 && (obj as HeadingBlock).Level < 6)).ToArray();
        }

        static void SaveKanbanBoard(string file, KanbanBoard board)
        {
            using var stream = File.Create(file);
            using var writer = new StreamWriter(stream);
            writer.Write(@$"<!doctype html>
<html lang=""en"">
    <head>
        <meta charset=""utf-8"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
        <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"" crossorigin=""anonymous"">
        <!-- Generated by Markdown Kanban at {DateTimeOffset.Now.ToString("u")} -->
        <title>{GetAsText(GetTitle(board.Markdown))}</title>
        <style>
            h1, h2, h3, h4, h5, h6 {{
                font-size: 1rem;
            }}
            body {{
                padding: 0.5rem;
            }}
            .kanban-board {{
            }}
            .kanban-lists {{
                height: calc(100vh - 5rem);
                display: flex;
                flex-direction: row;
                gap: 2rem;
            }}
            .kanban-list {{
                flex: 0 0 15rem;
            }}
            .kanban-cards {{
                overflow: auto;
                height: 100%;
            }}
            .kanban-card {{
                flex: 0 0 5rem;
                overflow: hidden;
                cursor: pointer;
            }}
            .kanban-card .card-title {{
                font-weight: normal;
            }}
        </style>
    </head>
    <body>");
            writer.Write(@"
        <div class=""kanban-board"">
            ");
            WriteHtml(writer, GetTitle(board.Markdown));
            WriteHtml(writer, GetBody(board.Markdown));
            writer.Write(@"
            <div class=""kanban-lists"">");
            foreach (var list in board.Lists)
            {
                writer.Write(@"
                <div class=""kanban-list"">
                    ");
                WriteHtml(writer, GetTitle(list.Markdown));
                WriteHtml(writer, GetBody(list.Markdown));
                writer.Write(@"
                    <div class=""kanban-cards row row-cols-1 g-4"">");
                foreach (var card in list.Cards)
                {
                    writer.Write(@$"
                        <div class=""col"">
                            <div class=""kanban-card card text-dark bg-light"" data-bs-toggle=""modal"" data-bs-target=""#card{card.Id}"">
                                <div class=""card-body"">
                                    <h5 class=""card-title"">{GetAsText(GetTitle(card.Markdown))}</h5>
                                    ");
                    WriteLabels(writer, card.Markdown);
                    writer.Write(@$"
                                </div>
                            </div>
                        </div>
                        <div class=""modal fade"" id=""card{card.Id}"" tabindex=""-1"" aria-labelledby=""card{card.Id}title"" aria-hidden=""true"">
                            <div class=""modal-dialog"">
                                <div class=""modal-content"">
                                    <div class=""modal-header"">
                                        <h5 class=""modal-title"" id=""card{card.Id}title"">{GetAsText(GetTitle(card.Markdown))}</h5>
                                        <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
                                    </div>
                                    <div class=""modal-body"">
                                        ");
                    WriteLabels(writer, card.Markdown);
                    WriteHtml(writer, GetBody(card.Markdown));
                    writer.Write(@"
                                    </div>
                                </div>
                            </div>
                        </div>
                    ");
                }
                writer.Write(@"
                    </div>
                </div>
                ");
            }
            writer.Write(@"
            </div>
        </div>
        <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"" crossorigin=""anonymous""></script>
    </body>
</html>");
        }
    }
}
